document.addEventListener('DOMContentLoaded', () => {
    const messageForm = document.getElementById('message-form');
    const messageInput = document.getElementById('message-input');
    const messagesContainer = document.querySelector('.chat-messages');
    const typingIndicator = document.querySelector('.typing-indicator');
    const emojiButton = document.getElementById('emoji-button');
    const attachButton = document.getElementById('attach-button');
    const fileInput = document.getElementById('file-input');

    const botAvatarUrl = 'https://placekitten.com/g/40/40';
    const userAvatarUrl = 'https://i.pravatar.cc/40?u=currentUser';

    setTimeout(() => {
        addMessageToChat("Hello! I'm FinnyMate. How can I assist you today?", 'bot');
    }, 500);

    messageForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const userMessage = messageInput.value.trim();
        if (userMessage) {
            addMessageToChat(userMessage, 'user');
            messageInput.value = '';
            messageInput.style.height = 'auto';
            processUserMessage(userMessage);
        }
    });

    messageInput.addEventListener('input', () => {
        messageInput.style.height = 'auto';
        messageInput.style.height = messageInput.scrollHeight + 'px';
    });

    messageInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            messageForm.requestSubmit();
        }
    });

    emojiButton.addEventListener('click', () => {
        alert("Emoji picker coming soon!");
    });

    attachButton.addEventListener('click', () => {
        fileInput.click();
    });

    fileInput.addEventListener('change', (event) => {
        const file = event.target.files[0];
        if (file) {
            addMessageToChat(`File attached: ${file.name} (preview/upload not implemented)`, 'user');
            setTimeout(() => {
                addMessageToChat(`Thanks for sharing "${file.name}". I can't process files yet, but noted!`, 'bot');
            }, 1000);
        }
        fileInput.value = '';
    });

    function addMessageToChat(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.classList.add('message', sender === 'user' ? 'user-message' : 'bot-message');

        const avatarImg = document.createElement('img');
        avatarImg.classList.add('avatar');
        avatarImg.src = sender === 'user' ? userAvatarUrl : botAvatarUrl;
        avatarImg.alt = sender === 'user' ? 'User Avatar' : 'Bot Avatar';

        const messageContentDiv = document.createElement('div');
        messageContentDiv.classList.add('message-content');

        const textP = document.createElement('p');
        textP.innerHTML = parseMessageText(text);

        const timestampSpan = document.createElement('span');
        timestampSpan.classList.add('timestamp');
        timestampSpan.textContent = new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

        messageContentDiv.appendChild(textP);
        messageContentDiv.appendChild(timestampSpan);

        messageDiv.appendChild(avatarImg);
        messageDiv.appendChild(messageContentDiv);

        messagesContainer.appendChild(messageDiv);
        scrollToBottom();

        void messageDiv.offsetWidth;
        messageDiv.style.opacity = '1';
        messageDiv.style.transform = 'translateY(0)';
    }

    function parseMessageText(text) {
        return text.replace(/\n/g, '<br>');
    }

    function scrollToBottom() {
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }

    function showTypingIndicator() {
        typingIndicator.style.display = 'flex';
        scrollToBottom();
    }

    function hideTypingIndicator() {
        typingIndicator.style.display = 'none';
    }

    async function processUserMessage(message) {
        showTypingIndicator();
        try {
            const response = await fetch("http://localhost:8000/api/generate", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    prompt: message,
                    max_new_tokens: 200,
                    temperature: 0.7,
                    do_sample: true
                })
            });

            const data = await response.json();
            hideTypingIndicator();

            if (data.response) {
                addMessageToChat(data.response, 'bot');
            } else {
                throw new Error("Empty response");
            }
        } catch (error) {
            hideTypingIndicator();
            console.error("Fallback to local botResponse due to error:", error);
            const fallbackResponse = getBotResponse(message);
            addMessageToChat(fallbackResponse, 'bot');
        }
    }

    function getBotResponse(userInput) {
        const lcInput = userInput.toLowerCase();
        if (lcInput.includes("hello") || lcInput.includes("hi") || lcInput.includes("hey")) {
            return "Hello there! How can I help you today?";
        } else if (lcInput.includes("how are you")) {
            return "I'm doing great, thanks for asking! Ready to assist you.";
        } else if (lcInput.includes("what is your name") || lcInput.includes("who are you")) {
            return "I am FinnyMate, your friendly AI chat assistant!";
        } else if (lcInput.includes("help")) {
            return "Sure, I can help with general queries. What do you need assistance with?";
        } else if (lcInput.includes("what can you do")) {
            return "I can chat with you, answer some basic questions, and hopefully make your day a bit brighter! Ask me anything.";
        } else if (lcInput.includes("time")) {
            return `The current time is ${new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}.`;
        } else if (lcInput.includes("date")) {
            return `Today's date is ${new Date().toLocaleDateString()}.`;
        } else if (lcInput.includes("bye") || lcInput.includes("goodbye")) {
            return "Goodbye! Have a great day!";
        } else if (lcInput.includes("thanks") || lcInput.includes("thank you")) {
            return "You're welcome! üòä";
        } else if (lcInput.includes("FPT c√≥ chia c·ªï t·ª©c nƒÉm 2024 kh√¥ng?") || lcInput.includes("Did FPT pay dividends in 2024?")) {
            return "D·ª±a tr√™n th√¥ng tin ƒë∆∞·ª£c cung c·∫•p, FPT c√≥ l·ªãch chia c·ªï t·ª©c v√†o ng√†y 9 th√°ng 5 nƒÉm 2024.Tuy nhi√™n, th√¥ng tin n√†y chua ƒë·ªÅ c·∫≠p ƒë·∫øn m·ª©c chia c·ª• th·ªÉ. B·∫°n c√≥ th·ªÉ t√¨m hi·ªÉu th√™m ·ªü ƒë∆∞·ªùng link sau:";
        } else if (lcInput.includes("L·ª£i nhu·∫≠n qu√Ω I/2024 c·ªßa CMG c√≥ tƒÉng kh√¥ng?") || lcInput.includes("Did CMG's profit increase in Q1 2024?")) {
            return `D·ª±a tr√™n th√¥ng tin tham kh·∫£o m√† b·∫°n cung c·∫•p, t√¥i th·∫•y r·∫±ng c√≥ hai giao d·ªãch l·ªõn li√™n quan ƒë·∫øn CMG v√†o ng√†y 26/03/2024 v√† 05/03/2024. Tuy nhi√™n, th√¥ng tin n√†y kh√¥ng cung c·∫•p chi ti·∫øt v·ªÅ l·ª£i nhu·∫≠n qu√Ω I/2024 c·ªßa CMG.
            
            ƒê·ªÉ d·ª± ƒëo√°n li·ªáu l·ª£i nhu·∫≠n qu√Ω I/2024 c·ªßa CMG c√≥ tƒÉng hay kh√¥ng, ch√∫ng ta c·∫ßn xem x√©t th√™m c√°c y·∫øu t·ªë nh∆∞:
            
            1. Bi·∫øn ƒë·ªông th·ªã tr∆∞·ªùng: CMG l√† m·ªôt c√¥ng ty vi·ªÖn th√¥ng di ƒë·ªông, doanh thu v√† l·ª£i nhu·∫≠n c·ªßa h·ªç th∆∞·ªùng ph·ª• thu·ªôc v√†o t√¨nh h√¨nh kinh t·∫ø chung v√† th·ªã tr∆∞·ªùng vi·ªÖn th√¥ng.
            
            2. S·∫£n ph·∫©m v√† d·ªãch v·ª•: CMG c√≥ th·ªÉ ƒë√£ ra m·∫Øt c√°c s·∫£n ph·∫©m m·ªõi ho·∫∑c c·∫£i ti·∫øn d·ªãch v·ª• n√†o ƒë√≥, ƒëi·ªÅu n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn doanh thu v√† l·ª£i nhu·∫≠n.
            
            3. Chi ph√≠: Chi ph√≠ v·∫≠n h√†nh, chi ph√≠ ƒë·∫ßu t∆∞ v√†o m·∫°ng l∆∞·ªõi di ƒë·ªông, chi ph√≠ marketing, v.v., c≈©ng c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn l·ª£i nhu·∫≠n.
            
            4. S·ªë l∆∞·ª£ng c·ªï phi·∫øu: Giao d·ªãch l·ªõn v√†o ng√†y 26/03/2024 c√≥ th·ªÉ cho th·∫•y s·ª± thay ƒë·ªïi trong s·ªü h·ªØu c·ªï phi·∫øu, nh∆∞ng kh√¥ng nh·∫•t thi·∫øt l√† doanh thu ho·∫∑c l·ª£i nhu·∫≠n tƒÉng.
            
            5. B√°o c√°o t√†i ch√≠nh: Th√¥ng tin chi ti·∫øt v·ªÅ doanh thu, chi ph√≠, v√† l·ª£i nhu·∫≠n qu√Ω I/2024 c·ªßa CMG c√¥ng b·ªë sau khi k·∫øt th√∫c qu√Ω, th∆∞·ªùng l√† v√†o gi·ªØa th√°ng 5/2024.
            
            V√¨ v·∫≠y, ƒë·ªÉ c√≥ c√°i nh√¨n ch√≠nh x√°c h∆°n v·ªÅ l·ª£i nhu·∫≠n qu√Ω I/2024 c·ªßa CMG, ch√∫ng ta c·∫ßn ch·ªù b√°o c√°o t√†i ch√≠nh ch√≠nh th·ª©c ƒë∆∞·ª£c c√¥ng b·ªë.`;

        } else if (lcInput.length < 5 && lcInput.length > 0) {
            return "Could you please elaborate a bit more?";
        } else {
            const genericResponses = [
                "I'm still learning. ",
                "I'm not sure I understand. Can you try asking in a different way?",
                "Let me think about that for a moment...",
                "Our Sever is down, comeback later. Sorry"
            ];
            return genericResponses[Math.floor(Math.random() * genericResponses.length)];
        }
    }
});
